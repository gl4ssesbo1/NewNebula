import sys
import botocore.exceptions
from mongoengine import DoesNotExist

from database.models import AWSS3Bucket

author = {
    "name": "gl4ssesbo1",
    "twitter": "https://twitter.com/gl4ssesbo1",
    "github": "https://github.com/gl4ssesbo1",
    "blog": "https://www.pepperclipp.com/"
}

needs_creds = True

variables = {
    "SERVICE": {
        "value": "s3",
        "required": "true",
        "description": "The service that will be used to run the module. It cannot be changed."
    },
    "BUCKET-NAME": {
        "value": "",
        "required": "true",
        "description": "A specific bucket or a list of buckets split by comma."
    },
    "KEY-NAME": {
        "value": "",
        "required": "false",
        "description": "The name of the key to download. If not added, the module will try to list all the objects and generate keys for all."
    },
    "POST-SIGNED": {
        "value": "false",
        "required": "true",
        "description": "Generates an URL to use with POST Signed Data."
    },
    "EXPIRATION-TIME": {
        "value": "2592000",
        "required": "true",
        "description": "The time in seconds for the URL to expire. By default (on Nebula), 30 days."
    }
}

description = ""

calls = [

]

aws_command = "aws s3 presign <bucket> --expires-in <seconds>"

def exploit(profile):
    deleted_files = []
    buckets = (variables["BUCKET-NAMES"]['value']).split(",").replace(" ","").trim()
    keyname = variables["KEY-NAME"]['value']
    expiration_time = variables["EXPIRATION-TIME"]['value']
    keyname = variables["KEY-NAME"]['value']
    return_dict = []
    error_dict = []

    all_objects = []
    if keyname == "":
        for bucket in buckets:
            objs = profile.list_objects_v2(Bucket=bucket)['Contents']
            for obj in objs:
                key = obj['Key']
                url_dict = generate_url(profile, bucket, key, expiration_time)
                if "unknown" in url_dict:
                    return {
                        "error": url_dict['unknown']
                    }
                if "error" in url_dict:
                    return_dict.append({
                        "error": url_dict['error']
                    })
                else:
                    return_dict.append({
                        "error": url_dict['error']
                    })

    else:
        for bucket in buckets:
            url_dict = generate_url(profile, bucket, keyname, expiration_time)
            if "unknown" in url_dict:
                return {
                    "error": url_dict['unknown']
                }
            if "error" in url_dict:
                return_dict.append({
                    "error": url_dict['error']
                })
            else:
                return_dict.append({
                    "error": url_dict['error']
                })

def generate_url(profile, bucket, key, expiration_time):
    try:
        url_response = profile.generate_presigned_url('get_object',
                                                      Params={
                                                          'Bucket': bucket,
                                                          'Key': key
                                                      },
                                                      ExpiresIn=expiration_time,
                                                      HttpMethod=None
                                                      )

        return {
            "Bucket": bucket,
            "Key": key,
            "URL": url_response
        }

    except botocore.exceptions.UnknownClientMethodError as e:
        return {"unknown": e}, 500

    except:
        e = sys.exc_info()
        return {
            "Bucket": bucket,
            "Key": key,
            "URL": str(e)
        }

