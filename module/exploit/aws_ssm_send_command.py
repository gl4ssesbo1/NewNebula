import botocore.exceptions
import sys
from __AMI_Images import AMIImages

author = {
    "name": "gl4ssesbo1",
    "twitter": "https://twitter.com/gl4ssesbo1",
    "github": "https://github.com/gl4ssesbo1",
    "blog": "https://www.pepperclipp.com/"
}

needs_creds = True

variables = {
    "SERVICE": {
        "value": "ssm",
        "required": "true",
        "description": "The service that will be used to run the module. It cannot be changed."
    },
    "INSTANCE-IDS": {
        "value": "All",
        "required": "false",
        "description": "The ID of the instance or several Instance IDs split by comma. Or use All. If set to All, DescribeInstances will be used to get a list of all Instances."
    },
    "COMMAND": {
        "value": "",
        "required": "false",
        "description": 'One command to execute on target Instances. Either use this or COMMAND-FILE.',
    },
    "COMMAND-FILE": {
        "value": "",
        "required": "false",
        "description": 'File path of a list of commands to be executed on the target instances. Either put this or COMMAND',
        "iswordlist": True
    },
    "PARAMETER-JSON": {
        "value": "",
        "required": "false",
        "description": "If you add this, don't add COMMAND or COMMAND-FILE. The parameters of the Document to run. You can call the GetDocument API to verify the document exists before attempting to start a session. Also, on directory client/tools on Nebula there are some parameter files for different Documents. If no document name is provided, a shell to the instance is launched by default."
    },
    "COMMENT": {
        "value": "",
        "required": "false",
        "description": "You can leave this empty, but adding a convincing comment will make it look more like a normal call, than a malicious one."
    },
    "TIMEOUT-SECONDS": {
        "value": "30",
        "required": "true",
        "description": "The time to wait for a command to run. If this time is reached and the command has not already started running, it will not run."
    },
    "OUTPUT-S3-BUCKET-NAME": {
        "value": "",
        "required": "false",
        "description": "The name of the S3 bucket where command execution responses should be stored."
    },
    "OUTPUT-S3-BUCKET-REGION": {
        "value": "",
        "required": "false",
        "description": "The region of the S3 bucket where command execution responses should be stored."
    },
    "OUTPUT-S3-BUCKET-PREFIX": {
        "value": "",
        "required": "false",
        "description": "The directory structure within the S3 bucket where the responses should be stored."
    },
    "CHECK-FOR-INSTANCE-PROFILE": {
        "value": "False",
        "required": "true",
        "description": "The value can be True or False. If this is set to True, it will check for Instance Profile with AmazonSSMManagedInstanceCore or AmazonEC2RoleforSSM and it's attachments."
    },
    "CREATE-INSTANCE-PROFILE": {
        "value": "False",
        "required": "true",
        "description": "The value can be True or False. If this is set to True, it will create an Instance Profile with AmazonSSMManagedInstanceCore and attach it to the inst"
    },
    "INSTANCE-PROFILE-NAME":{
        "value": "SSM",
        "required": "true",
        "description": "The name of the Instance profile to check for. If CREATE-INSTANCE-PROFILE is set to True, it will create the instance profile with this name with AmazonSSMManagedInstanceCore permissions."
    },
	#"RUN-SEVERAL-TIMES-IF-MORE-THAN-50-INSTANCES": {
	#	"value": "",
    #    "required": "true",
    #    "description": "The value can be True or False. The number of Instances you can target is 50. If you put this "
	#				   "to True, it will call SendCommand Several Times. If not, it will only run for the first 50 "
	#				   "instances. "
	#}
}
description = "SendCommands to some InstanceIDs provided, split by comma, or a file of InstanceIDs." \
              "Also shows the output of the command if you want to." \
              "The APIs used are ssm:SendCommand and ssm:GetCommandInvocation."

aws_command = """
aws ssm send-command --document-name <Document Name> --instance-ids <instance ID> --profile <profile>
aws ssm get-command-invocation --command-id <command ID> --instance-id <instance ID> --profile <profile>
"""

calls = [
    "DescribeInstances",
    "SendCommand"
]
def startClient():
    print()
def sendCommandWithInstanceList(profile, instanceList, documentName, parameters):
    print()
    #for instance in instanceList:

def exploit(profile):
    try:
        instance_ids = variables['INSTANCE-IDS']['value']
        documentname = variables['DOCUMENT-NAME']['value']
        documentversion = variables['DOCUMENT-VERSION']['value']
        parameters = variables['PARAMETER-JSON']['value']
        command_file = variables['COMMAND-FILE']['value']
        command = variables['COMMAND']['value']
        timeout = variables['TIMEOUT-SECONDS']['value']
        outputs3name = variables['OUTPUT-S3-BUCKET-NAME']['value']
        outputs3region = variables['OUTPUT-S3-BUCKET-REGION']['value']
        outputs3prefix = variables['OUTPUT-S3-BUCKET-PREFIX']['value']

        #RUN_SEVERAL_TIMES_IF_MORE_THAN_50_INSTANCES = variables['RUN-SEVERAL-TIMES-IF-MORE-THAN-50-INSTANCES']['value']

        #if not RUN_SEVERAL_TIMES_IF_MORE_THAN_50_INSTANCES.lower().strip().replace("\n", "") == "true" or \
        #   not RUN_SEVERAL_TIMES_IF_MORE_THAN_50_INSTANCES.lower().strip().replace("\n", "") == "true":
        #    return {"error": "RUN-SEVERAL-TIMES-IF-MORE-THAN-50-INSTANCES can only be True or False"}

        command_array = []

        # Check if either command or command file is provided.
        if command_file == "" and command_file == "":
            return {"error": "Either put COMMAND or COMMAND-FILE. Found None."}


        elif not command_file == "" and not command_file == "":
            return {"error": "Either put COMMAND or COMMAND-FILE. Found both."}
        elif not command_file == "" and command_file == "":
            command_array = [command]
        else:
            command_array = command_file

        if parameters == "":
            parameters = {
                "commands": command_array,
                "executionTimeout": 10
            }

        params = {}
        args = {}
        if instance_ids == "":
            return {"error": "Either put All for all Instances, or provide one INSTANCE-ID or several INSTANCE-IDs "
                             "Separated by commas."}

        else:
            linuxInstances = []
            windowsInstances = []
            instances = []
            if instance_ids == "All":
                try:
                    instanceResponse = profile.describe_instances()['Instances']

                    if len(instanceResponse) == 0:
                        return {"error": "There are no instances used in the account"}

                    for instance in instanceResponse:
                        for ami in AMIImages:
                            if ami['ImageId'] == instance['ImageId']:
                                if "Windows" in ami['PlatformDetails']:
                                    windowsInstances.append(instance['InstanceId'])

                                else:
                                    linuxInstances.append(instance('InstanceId'))

                except botocore.exceptions.ClientError:
                    return {"error": "User has no access to DescribeInstances. Provide a list of InstanceIDs to "
                                     "continue."}
            else:
                instances = instance_ids.replace(" ", "").split(",")

            if not documentname == "":
                args['DocumentName'] = documentname

            if not documentversion == "":
                args['DocumentVersion'] = documentversion

            if not timeout == "":
                try:
                    args['TimeoutSeconds'] = int(timeout)
                except ValueError:
                    return {"error": "TimeoutSeconds can only be an integer."}

            if not outputs3name == "":
                args['OutputS3BucketName'] = documentversion

            if not outputs3region == "":
                args['OutputS3KeyRegion'] = outputs3region

            if not outputs3prefix == "":
                args['OutputS3KeyPrefix'] = outputs3prefix

            if not parameters == "":
                args['Parameters'] = params

            allinst = []

            for instance in instances:
                try:
                    args['InstanceIds'] = [instance]
                    profile.send_command(
                        **args
                    )
                    allinst.append(f"Command was successful on Instance '{instance}'")

                except profile.exceptions.InvalidDocument:
                    return {"error": "The document provided is not valid or does not exist."}

                except profile.exceptions.TargetNotConnected:
                    return {"error": "You cannot connect to the target. Either you have an internet problem, or the target might be shutdown/removed."}

                except:
                    allinst.append(f"Error on Instance '{instance}': {str(sys.exc_info())}")

    except:
        return {"error": str(sys.exc_info())}

